// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SampleAutomatedTesting
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Проверяем функции сложения, вычитания умножения в калькуляторе")]
    public partial class ПроверяемФункцииСложенияВычитанияУмноженияВКалькулятореFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Calculator.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("ru-RU"), "Проверяем функции сложения, вычитания умножения в калькуляторе", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Операция сложения")]
        public virtual void ОперацияСложения()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Операция сложения", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.When("слагаю 15 и 6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 5
 testRunner.Then("получаю 21", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Операция вычитания")]
        public virtual void ОперацияВычитания()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Операция вычитания", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.When("отнимаю 10 из 20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 9
 testRunner.Then("получаю 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Операция умножения")]
        public virtual void ОперацияУмножения()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Операция умножения", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.When("10 умножаю на 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 13
 testRunner.Then("получаю 50", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Операция сложения с множеством примеров")]
        [NUnit.Framework.TestCaseAttribute("1", "2", "3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("100", "23", "123", new string[0])]
        [NUnit.Framework.TestCaseAttribute("12", "243", "255", new string[0])]
        [NUnit.Framework.TestCaseAttribute("68", "3567", "3635", new string[0])]
        public virtual void ОперацияСложенияСМножествомПримеров(string значение1, string значение2, string результат, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Операция сложения с множеством примеров", exampleTags);
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.When(string.Format("слагаю {0} и {1}", значение1, значение2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 17
 testRunner.Then(string.Format("получаю {0}", результат), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Операция вычитания с множеством примеров")]
        [NUnit.Framework.TestCaseAttribute("2", "1", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("39", "21", "18", new string[0])]
        [NUnit.Framework.TestCaseAttribute("12", "20", "-8", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4560", "429", "4131", new string[0])]
        public virtual void ОперацияВычитанияСМножествомПримеров(string значение2, string значение1, string результат, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Операция вычитания с множеством примеров", exampleTags);
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.When(string.Format("отнимаю {0} из {1}", значение1, значение2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 27
 testRunner.Then(string.Format("получаю {0}", результат), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Операция умножения с множеством примеров")]
        [NUnit.Framework.TestCaseAttribute("1", "2", "2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("10", "21", "210", new string[0])]
        [NUnit.Framework.TestCaseAttribute("38", "15", "570", new string[0])]
        [NUnit.Framework.TestCaseAttribute("123", "45", "5535", new string[0])]
        public virtual void ОперацияУмноженияСМножествомПримеров(string значение1, string значение2, string результат, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Операция умножения с множеством примеров", exampleTags);
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.When(string.Format("{0} умножаю на {1}", значение1, значение2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Если ");
#line 37
 testRunner.Then(string.Format("получаю {0}", результат), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "То ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
